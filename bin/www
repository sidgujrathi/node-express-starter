#!/usr/bin/env node

/**
 * This is server bin file where HTTP server is created and getting started for hosting
 */

const http = require('http');
const app = require('../server');
const logger = require('../src/helper/logger');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    //  named pipe
    return val;
  }

  if (port >= 0) {
    //  port number
    return port;
  }

  return false;
}

// get port from environment and store in Express.
const port = normalizePort(process.env.PORT || 5000);

/**
 * Event listener for HTTP server 'error' event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe  ${port}`
    : `Port  ${port}`;

  //  handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
 * Event listener for HTTP server 'listening' event.
 */
function onListening() {
  console.debug(`The server is running and listening at http://localhost:${port}${process.env.API_ENDPOINT}`);
};


app.set('port', port);
// create http server
const server = http.createServer(app);

// listen on provided ports
server.listen(port);

// add error handler
server.on('error', onError);

// start listening on port
server.on('listening', onListening);

// application specific logging, throwing an error, or other logic here
process.on('unhandledRejection', (err) => {
  logger.error('Unhandled Promise Rejection: reason:', err.message);
  logger.error(String(err.stack));
  process.exit(0);
});
